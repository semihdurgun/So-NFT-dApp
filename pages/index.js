import Head from 'next/head'
import styles from '../styles/Home.module.css'
import soContract, {contractAddress} from '../contracts/so'
import { useEffect, useState } from 'react'
import Web3 from 'web3'


export default function Home() {
  const [web3, setWeb3] = useState()
  const [address, setAddress] = useState()
  const [lcContract, setLcContract] = useState()
  const [count, setCount] = useState(1);
  const [maxMintAmount, setMaxMintAmount] = useState(0);
  const [totalSupply, setTotalSupply] = useState(0);
  const [nftPrice, setNftPrice] = useState("0.01");
  const [error, setError] = useState('');

  useEffect(() => {
    (async() => { 
      await getCurrentWalletConnected()
      await setContract()
      walletListener()
    }) ();
  }, [])

  useEffect(() => {
    (async() => { 
      setMaxMintAmount(await getMaxMintAmount());
      setNftPrice(await getNftPrice());
      setTotalSupply(await getTotalSupply());
    }) ();
  }, [lcContract])

  const getCurrentWalletConnected = async () => {
    if (window.ethereum) {
      const web3 = new Web3(window.ethereum)
      const accounts = await web3.eth.getAccounts()
      setAddress(accounts[0])
    }
  };
  
  const getMaxMintAmount = async () => {
    try{
      const result = await lcContract.methods.maxTokenPurchase().call();
      return result;
    }catch(err){
      console.log(err)
    }
  };
  
  const getTotalSupply = async () => {
    try{
      const result = await lcContract.methods.totalSupply().call();
      return result;
    }catch(err){
      console.log(err)
    }
  };
  
  const getNftPrice = async () => {
    try{
      const result = await lcContract.methods.tokenPrice().call();
      const resultEther = web3.utils.fromWei(result, "ether");
      return resultEther;
    }catch(err){
      console.log(err)
    }
  };

  const connectWalletHandler = async () => {
    setError('')
    // check if metamask is installed and then connect to the blockchain. 
    if (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {
      try{
        await window.ethereum.request({ method: 'eth_requestAccounts'})
        const web3 = new Web3(window.ethereum)
        setWeb3(web3)
        const accounts = await web3.eth.getAccounts()
        setAddress(accounts[0])
  
        const lc = soContract(web3)
        setLcContract(lc)
      } catch(err){
        setError(err.message)
      }
    } else{
      setError("Please instal Metamask!");
    }
  }

  const incrementCount = () => {
    if (count < maxMintAmount) {
      setCount(count + 1);
    }
  };

  const decrementCount = () => {
    if (count > 1) {
      setCount(count - 1);
    }
  };

  const mintSo = async () => {
    if (!window.ethereum.selectedAddress) {
      return {
        success: false,
        status: (
          <p>
            ðŸ¦Š Connect to Metamask using{" "}
            <span className="px-2 text-purple-600">Connect Wallet</span> button.
          </p>
        ),
      };
    }
  
    //set up your Ethereum transaction
    const transactionParameters = {
      to: contractAddress, // Required except during contract publications.
      from: window.ethereum.selectedAddress, // must match user's active address.
      value: parseInt(web3.utils.toWei("0.01", "ether") * count).toString(
        16
      ), // hex
      gasLimit: "0",
      data: lcContract.methods.mintSo(count).encodeABI(), //make call to NFT smart contract
    };
    //sign the transaction via Metamask
    try {
      const txHash = await window.ethereum.request({
        method: "eth_sendTransaction",
        params: [transactionParameters],
      });
      return {
        success: true,
        status:
          "Success" +
          txHash,
      };
    } catch (error) {
      return {
        success: false,
        status: "Something went wrong: " + error.message,
      };
    }
  };

  const walletListener = () => {
    if (window.ethereum) {
      const web3 = new Web3(window.ethereum)
      setWeb3(web3)
      window.ethereum.on('accountsChanged', async () =>{
        const accounts = await web3.eth.getAccounts()
        setAddress(accounts[0])
      })
    }
  };

  const setContract = async () => {
    if (window.ethereum) {
      const web3 = new Web3(window.ethereum)
      setWeb3(web3)
      const accounts = await web3.eth.getAccounts()
      setAddress(accounts[0])

      const lc = soContract(web3)
      setLcContract(lc)
    }
  };


  return (
    <div className={styles.container}>
      <Head>
        <title>So NFT Mint</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
      <nav className="navbar mt-4 mb-4">
          <div className="container">
            <div>
              <h1>Welcome So NFT Minting</h1>
            </div>
            {!address ?  
            <div >
              <button onClick={() => connectWalletHandler()}>Connect Wallet</button>
            </div>: 
            <div>
            <button>Connected {address}</button>
            </div>
            
            }
          </div>
      </nav>
        <div className="container">
        <p className="bg-gray-100 rounded-md text-gray-800 font-extrabold text-lg my-4 py-1 px-3">
                <span className="text-purple-600">{`${totalSupply}`}</span> /
                1000 
              </p>

              <div className="flex items-center mt-6 text-3xl font-bold text-gray-200" style={{"display":"flex", "alignContent":"center", "alignItems":"center"}}>
                
                <button
                  className="flex items-center justify-center w-12 h-12 bg-white rounded-md hover:bg-pink-200 text-center"
                  onClick={decrementCount}
                  style={{"marginRight":"1rem"}}
                >
                -
                </button>

                <h2 className="mx-8">{count}</h2>

                <button
                  className="flex items-center justify-center w-12 h-12 bg-white rounded-md text-black hover:bg-pink-200 text-center"
                  onClick={incrementCount}
                  style={{"marginLeft":"1rem"}}
                >
                +
                </button>
              </div>

              <h4 className="mt-2 font-semibold text-center text-white">
                {nftPrice} BNB{" "}
                <span className="text-sm text-gray-300"> + GAS</span>
              </h4>

              {/* Mint Button */}
              <button
                className="mt-6 py-2 px-4 text-center text-white uppercase bg-pink-500 border-b-4 border-pink-700 rounded hover:bg-pink-400 hover:border-pink-500"
                onClick={mintSo}
              >
                Mint now!
              </button>
              {error && <p className="text-red-500">{error}</p>}
        </div>
      </main>

    </div>
  )
}
